---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
// Access any additional, non-typed frontmatter fields (SEO extras)
const fm = Astro.props as Record<string, any>;
const canonicalURL = new URL(fm.canonicalUrl ?? Astro.url.pathname, Astro.site);
const tags = (fm.tags ?? fm.categories) as string[] | undefined;
---

<html lang="en">
	<head>
		<BaseHead
			title={title}
			description={fm.metaDescription ?? description}
			image={heroImage}
			ogType="article"
			keywords={fm.keywords}
			author={fm.author}
			ogTitle={fm.ogTitle}
			ogDescription={fm.ogDescription ?? fm.metaDescription}
			ogImage={fm.ogImage}
			twitterCard={fm.twitterCard}
			twitterTitle={fm.twitterTitle}
			twitterDescription={fm.twitterDescription ?? fm.metaDescription}
			twitterImage={fm.twitterImage ?? fm.ogImage}
			canonicalUrl={fm.canonicalUrl}
		/>
		<!-- Article-specific meta tags -->
		{pubDate && (<meta property="article:published_time" content={new Date(pubDate).toISOString()} />)}
		{updatedDate && (<meta property="article:modified_time" content={new Date(updatedDate).toISOString()} />)}
		{fm.author && (<meta property="article:author" content={fm.author} />)}
		{tags && tags.map((t) => (<meta property="article:tag" content={t} />))}

		<!-- JSON-LD Structured Data -->
		<script type="application/ld+json">
			{JSON.stringify({
				"@context": "https://schema.org",
				"@type": "Article",
				headline: title,
				description: fm.metaDescription ?? description,
				image: heroImage ? (heroImage.src ?? heroImage) : undefined,
				datePublished: pubDate ? new Date(pubDate).toISOString() : undefined,
				dateModified: updatedDate ? new Date(updatedDate).toISOString() : undefined,
				author: fm.author ? { "@type": "Person", name: fm.author } : undefined,
				mainEntityOfPage: canonicalURL.href,
				keywords: tags && tags.length ? tags.join(', ') : undefined
			})}
		</script>
		<style lang="scss">
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0; flex: 1;
				background-color: #fff;
				header { text-align: center;
					.hero-image { margin: 2rem auto 0; width: 100%; padding-bottom: 50%;    border-radius: .5rem; overflow: hidden; background-size: cover; background-position: center; box-shadow: 0 10px 15px -3px #0000001a, 0 4px 6px -2px #0000000d; }
				
				}
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				width: 100%;
				height: auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.intro {
				text-align: center;
				line-height: 1.2;
			}
			.intro h1 {
				margin: 0 0 0.5em 0;
			}
			.meta {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5em;
				justify-content: center;
				color: rgb(var(--gray));
				font-size: 0.95em;
			}
			.meta .dot::before {
				content: 'â€¢';
				margin: 0 0.25em 0 0.25em;
			}
			.tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5em;
				justify-content: center;
				margin: 0.75em 0 0;
				padding: 0;
				list-style: none;
			}
			.tag {
				background: #eef1f4;
				color: rgb(var(--gray-dark));
				border-radius: 999px;
				padding: 0.35em 0.65em;
				font-size: 0.85em;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="prose">
					<header class="intro">
						<h1>{title}</h1>
						<div class="meta">
							{pubDate && (
								<FormattedDate date={pubDate} />
							)}
							{fm.author && (<span class="dot">by {fm.author}</span>)}
							{typeof fm.readTime !== 'undefined' && (<span class="dot">{fm.readTime} min read</span>)}
							{fm.section && (<span class="dot">{fm.section}</span>)}
							{updatedDate && (
								<span class="last-updated-on dot">Updated <FormattedDate date={updatedDate} /></span>
							)}
						</div>
						{(fm.tags ?? fm.categories) && (
							<ul class="tags">
								{(fm.tags ?? fm.categories).map((tag: string) => <li class="tag">{tag}</li>)}
							</ul>
						)}
						{heroImage && (
							<div class="hero-image" style={`background-image: url(${heroImage.src})`}></div>
						)}
					</header>
					<hr />
					<slot />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
